AWSTemplateFormatVersion: 2010-09-09
Description: 'Bank chatbot with Lambda and Lex'
Parameters:
  ParamFacebookPageId:
    Type: String
    Description: Facebook Page ID
  ParamFacebookPageToken:
    Type: String
    Description: Facebook Page Token
Resources:
  DDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      StreamSpecification:
        StreamViewType: 'KEYS_ONLY'
      TableName: bank-bot-demo
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: bank-bot-demo-dynamodb-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:ListStreams'
                Resource:
                  - Fn::GetAtt:
                    - 'DDBTable'
                    - 'Arn'
                  - Fn::GetAtt:
                    - 'DDBTable'
                    - 'StreamArn'
        - PolicyName: bank-bot-demo-lex-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lex:PostContent'
                  - 'lex:PostText'
                Resource:
                  - 'arn:aws:lex:us-east-1:831212071815:bot:CitiDemo:Demo'
      RoleName: bank-bot-demo-service-role
    DependsOn:
      - DDBTable
  LambdaAuthRedirect:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: 'khk-aws'
        S3Key: 'demos/bank-bot-demo/auth-redirect.zip'
      Description: 'Handles the auth redirect from Bank'
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          CLIENT_ID: '000000'
          CLIENT_SECRET: '999999'
          BANK_TOKEN_URL: 'http://localhost'
      FunctionName: 'bank-demo-auth-redirect'
      Handler: 'lambda_function.lambda_handler'
      Role:
        Fn::GetAtt:
          - 'IAMRole'
          - 'Arn'
      Runtime: 'python3.6'
      Timeout: '10'
  LambdaAuthWelcome:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: 'khk-aws'
        S3Key: 'demos/bank-bot-demo/auth-welcome.zip'
      Description: 'Sends welcome message to User after authorized'
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          PAGE_ID:
            Ref: ParamFacebookPageId
          PAGE_TOKEN:
            Ref: ParamFacebookPageToken
      FunctionName: 'bank-demo-auth-welcome'
      Handler: 'lambda_function.lambda_handler'
      Role:
        Fn::GetAtt:
          - 'IAMRole'
          - 'Arn'
      Runtime: 'python3.6'
      Timeout: '10'
    DependsOn:
      - DDBTable
  AuthWelcomeEventMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn:
        Fn::GetAtt:
          - 'DDBTable'
          - 'StreamArn'
      FunctionName:
        Fn::GetAtt:
          - 'LambdaAuthWelcome'
          - 'Arn'
      StartingPosition: "TRIM_HORIZON"
    DependsOn:
      - LambdaAuthWelcome
  LambdaBankBot:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: 'khk-aws'
        S3Key: 'demos/bank-bot-demo/bank-bot.zip'
      Description: 'Function that handles communication with Lex'
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
      FunctionName: 'bank-demo-bot'
      Handler: 'lambda_function.lambda_handler'
      Role:
        Fn::GetAtt:
          - 'IAMRole'
          - 'Arn'
      Runtime: 'python3.6'
      Timeout: '10'
  LambdaFacebookWebhook:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: 'khk-aws'
        S3Key: 'demos/bank-bot-demo/facebook-webhook.zip'
      Description: 'Handles webhook request from Facebook Messenger'
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          PAGE_ID:
            Ref: ParamFacebookPageId
          PAGE_TOKEN:
            Ref: ParamFacebookPageToken
          BANK_AUTH_URL: 'http://localhost'
      FunctionName: 'bank-demo-facebook-webhook'
      Handler: 'lambda_function.lambda_handler'
      Role:
        Fn::GetAtt:
          - 'IAMRole'
          - 'Arn'
      Runtime: 'python3.6'
      Timeout: '10'
  BankBotDemoApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'Bank Bot Demo API'
      Description: 'API used to interact with bot'
      FailOnWarnings: true
  BankBotDemoApiStage:
    DependsOn:
      - BankBotDemoApi
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      RestApiId:
        Ref: BankBotDemoApi
      StageName: 'v1'
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ApiFacebookWebhookGetRequest
      - ApiFacebookWebhookPostRequest
      - ApiRedirectGetRequest
    Properties:
      RestApiId: !Ref BankBotDemoApi
      StageName: 'dummy'
  ApiFacebookWebhookResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: BankBotDemoApi
      ParentId:
        Fn::GetAtt:
          - BankBotDemoApi
          - RootResourceId
      PathPart: 'facebook-webhook'
  ApiRedirectResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: BankBotDemoApi
      ParentId:
        Fn::GetAtt:
          - BankBotDemoApi
          - RootResourceId
      PathPart: 'redirect'
  ApiFacebookWebhookGetRequest:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: BankBotDemoApi
      ResourceId:
        Ref: 'ApiFacebookWebhookResource'
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'GET'
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFacebookWebhook.Arn}/invocations
        PassthroughBehavior: 'WHEN_NO_TEMPLATES'
        RequestTemplates:
          application/json:
            Fn::Join:
              - "\n"
              -
                - '#set($allParams = $input.params())'
                - '{'
                - '  "body-json" : $input.json(''$''),'
                - '  "params" : {'
                - '  #foreach($type in $allParams.keySet())'
                - '    #set($params = $allParams.get($type))'
                - '    "$type" : {'
                - '    #foreach($paramName in $params.keySet())'
                - '    "$paramName" : "$util.escapeJavaScript($params.get($paramName))"'
                - '      #if($foreach.hasNext),#end'
                - '    #end'
                - '    }'
                - '    #if($foreach.hasNext),#end'
                - '  #end'
                - '  }'
                - '}'
  ApiFacebookWebhookPostRequest:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: BankBotDemoApi
      ResourceId:
        Ref: 'ApiFacebookWebhookResource'
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFacebookWebhook.Arn}/invocations
        PassthroughBehavior: 'WHEN_NO_TEMPLATES'
        RequestTemplates:
          application/json:
            Fn::Join:
              - "\n"
              -
                - '#set($allParams = $input.params())'
                - '{'
                - '  "body-json" : $input.json(''$''),'
                - '  "params" : {'
                - '  #foreach($type in $allParams.keySet())'
                - '    #set($params = $allParams.get($type))'
                - '    "$type" : {'
                - '    #foreach($paramName in $params.keySet())'
                - '    "$paramName" : "$util.escapeJavaScript($params.get($paramName))"'
                - '      #if($foreach.hasNext),#end'
                - '    #end'
                - '    }'
                - '    #if($foreach.hasNext),#end'
                - '  #end'
                - '  }'
                - '}'
  ApiRedirectGetRequest:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: BankBotDemoApi
      ResourceId:
        Ref: 'ApiRedirectResource'
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'GET'
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthRedirect.Arn}/invocations
        PassthroughBehavior: 'WHEN_NO_TEMPLATES'
        RequestTemplates:
          application/json:
            Fn::Join:
              - "\n"
              -
                - '#set($allParams = $input.params())'
                - '{'
                - '  "body-json" : $input.json(''$''),'
                - '  "params" : {'
                - '  #foreach($type in $allParams.keySet())'
                - '    #set($params = $allParams.get($type))'
                - '    "$type" : {'
                - '    #foreach($paramName in $params.keySet())'
                - '    "$paramName" : "$util.escapeJavaScript($params.get($paramName))"'
                - '      #if($foreach.hasNext),#end'
                - '    #end'
                - '    }'
                - '    #if($foreach.hasNext),#end'
                - '  #end'
                - '  }'
                - '}'

